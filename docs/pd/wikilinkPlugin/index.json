{
  "fileName": "wikilinkPlugin",
  "dir": ".pd/wikilinkPlugin",
  "config": {
    "on": {},
    "emit": true,
    "persist": true,
    "exclude": [
      "node_modules",
      "dist",
      "build",
      "coverage",
      "public",
      "temp",
      "docs",
      "_site"
    ],
    "build": [
      "esm"
    ]
  },
  "name": "Wikilink Plugin",
  "camelName": "wikilinkPlugin",
  "steps": [
    {
      "name": "emitStartEvent",
      "code": "const event = new CustomEvent('pd:pipe:start', {detail: {input, opts}})\n          dispatchEvent(event)",
      "funcName": "emitStartEvent",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    },
    {
      "name": "persistInput",
      "code": "\n      const kvAvailable = typeof Deno !== 'undefined' && typeof Deno.openKv === 'function'\n      if(kvAvailable) {\n        try {\n          const db = await Deno.openKv()\n          const key = ['pd', 'input', opts.fileName]\n          try {\n              await db.set(key, JSON.stringify(input))\n          } catch (e) {\n            const safe = {\n              error: e.message,\n            }\n            for (const [k, v] of Object.entries(input)) {\n                safe[k] = typeof v;\n            }\n            await db.set(key, safe)\n          }\n        } catch (e) {\n            console.error(e)\n        }\n      } else {\n        const key = 'pd:input:' + opts.fileName \n        const inputJson = localStorage.getItem(key) || '[]'\n        const storedJson = JSON.parse(inputJson)\n        storedJson.push(JSON.stringify(input))\n        localStorage.setItem(key, JSON.stringify(storedJson))\n      }\n      ",
      "funcName": "persistInput",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    },
    {
      "code": "import markdownit from \"npm:markdown-it\";\nimport { walkSync } from \"jsr:@std/fs\";\nimport { relative, join, parse } from \"jsr:@std/path\";\n",
      "range": [
        32,
        34
      ],
      "name": "Wikilink Plugin",
      "funcName": "wikilinkPlugin",
      "inList": false
    },
    {
      "code": "input.mdi.inline.ruler.push('wikimatch', (state, silent) => {\n    const regexOverride = input.options.regex && new RegExp(input.options.regex)\n    const regex = regexOverride || /^\\[\\[(.*)\\]\\]/\n\n    const match = regex.exec(state.src.slice(state.pos))\n    if(!match) return;\n    // let the parser skip what we've matched\n    state.pos += match[0].length\n\n    if (silent) return true\n    const token = state.push('wikimatch', '', 0)\n    token.meta = {match}\n    return true;\n})\n",
      "range": [
        67,
        69
      ],
      "name": "inlineRuler",
      "funcName": "inlineRuler",
      "inList": false
    },
    {
      "code": "input.mdi.renderer.rules.wikimatch = (tokens, idx) => {\n    let firstFile: PathInfo | undefined;\n    try {\n        for (const file of walkSync(Deno.cwd(), { skip: [/\\.pd/, /_site/]})) {\n            if (file.path.includes(tokens[idx].meta.match[1])) {\n                firstFile = file;\n                break;\n            }\n        }\n    } catch (e) {\n        // wont work in the browser\n        console.error(e)\n    }\n\n    let path = firstFile ? relative(Deno.cwd(), firstFile.path) : tokens[idx].meta.match[1];\n\n    if(input.options.relativePaths) {\n    } else {\n        path = join('/', path)\n    }\n\n    if (input.options.basePath.length > 0)\n        path = join(input.options.basePath, path)\n\n    if (input.options.stripExtension)\n        path = path.replace(parse(path).ext, '')\n\n    return `<a href=\"${path}\">${parse(path).name}</a>`\n}\n",
      "range": [
        87,
        89
      ],
      "name": "renderRuler",
      "funcName": "renderRuler",
      "inList": false
    },
    {
      "name": "persistOutput",
      "code": "\n      const kvAvailable = typeof Deno !== 'undefined' && typeof Deno.openKv === 'function'\n      if(kvAvailable) {\n        try {\n          const db = await Deno.openKv()\n          const key = ['pd', 'output', opts.fileName]\n          try {\n              await db.set(key, JSON.stringify(input))\n          } catch (e) {\n            const safe = {\n              error: e.message,\n            }\n            for (const [k, v] of Object.entries(input)) {\n                safe[k] = typeof v;\n            }\n            await db.set(key, safe)\n          }\n        } catch (e) {\n            console.error(e)\n        }\n      } else {\n        const key = 'pd:output:' + opts.fileName \n        const inputJson = localStorage.getItem(key) || '[]'\n        const storedJson = JSON.parse(inputJson)\n        storedJson.push(JSON.stringify(input))\n        localStorage.setItem(key, JSON.stringify(storedJson))\n      }\n      ",
      "funcName": "persistOutput",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    },
    {
      "name": "emitEndEvent",
      "code": "const event = new CustomEvent('pd:pipe:end', {detail: {input, opts}})\n          dispatchEvent(event)",
      "funcName": "emitEndEvent",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    }
  ]
}