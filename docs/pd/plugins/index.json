{
  "fileName": "plugins",
  "dir": ".pd/plugins",
  "config": {
    "on": {},
    "emit": true,
    "persist": true,
    "exclude": [
      "node_modules",
      "dist",
      "build",
      "coverage",
      "public",
      "temp",
      "docs",
      "_site"
    ],
    "build": [
      "esm"
    ]
  },
  "name": "Plugins for markdown-it",
  "camelName": "pluginsForMarkdown-It",
  "steps": [
    {
      "name": "emitStartEvent",
      "code": "const event = new CustomEvent('pd:pipe:start', {detail: {input, opts}})\n          dispatchEvent(event)",
      "funcName": "emitStartEvent",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    },
    {
      "name": "persistInput",
      "code": "\n      const kvAvailable = typeof Deno !== 'undefined' && typeof Deno.openKv === 'function'\n      if(kvAvailable) {\n        try {\n          const db = await Deno.openKv()\n          const key = ['pd', 'input', opts.fileName]\n          try {\n              await db.set(key, JSON.stringify(input))\n          } catch (e) {\n            const safe = {\n              error: e.message,\n            }\n            for (const [k, v] of Object.entries(input)) {\n                safe[k] = typeof v;\n            }\n            await db.set(key, safe)\n          }\n        } catch (e) {\n            console.error(e)\n        }\n      } else {\n        const key = 'pd:input:' + opts.fileName \n        const inputJson = localStorage.getItem(key) || '[]'\n        const storedJson = JSON.parse(inputJson)\n        storedJson.push(JSON.stringify(input))\n        localStorage.setItem(key, JSON.stringify(storedJson))\n      }\n      ",
      "funcName": "persistInput",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    },
    {
      "code": "import markdownit from \"npm:markdown-it\";\n",
      "range": [
        15,
        17
      ],
      "name": "Plugins for markdown-it",
      "funcName": "pluginsForMarkdown-It",
      "inList": false
    },
    {
      "code": "const md = markdownit().use((md, options) => {\n    console.log({md, options})\n})\n$p.set(input, '/markdown.dirtyPlugin', md.render('# hello'))\n",
      "range": [
        26,
        28
      ],
      "name": "How do we make plugins anyway",
      "funcName": "howDoWeMakePluginsAnyway",
      "inList": false
    },
    {
      "code": "const md = markdownit().use((md, options) => {\n    md.inline.ruler.after('text', 'wiki', state => {\n        console.log({state})\n    })\n    console.log('#2', {md, options})\n})\n$p.set(input, '/markdown.dirtyInlinePlugin', md.render(`# hello\n\nhow about now\n\n[wat](/wat)\n\n[[wikilink]]`))\n",
      "range": [
        56,
        58
      ],
      "name": "rulers to rule them all",
      "funcName": "rulersToRuleThemAll",
      "inList": false
    },
    {
      "name": "persistOutput",
      "code": "\n      const kvAvailable = typeof Deno !== 'undefined' && typeof Deno.openKv === 'function'\n      if(kvAvailable) {\n        try {\n          const db = await Deno.openKv()\n          const key = ['pd', 'output', opts.fileName]\n          try {\n              await db.set(key, JSON.stringify(input))\n          } catch (e) {\n            const safe = {\n              error: e.message,\n            }\n            for (const [k, v] of Object.entries(input)) {\n                safe[k] = typeof v;\n            }\n            await db.set(key, safe)\n          }\n        } catch (e) {\n            console.error(e)\n        }\n      } else {\n        const key = 'pd:output:' + opts.fileName \n        const inputJson = localStorage.getItem(key) || '[]'\n        const storedJson = JSON.parse(inputJson)\n        storedJson.push(JSON.stringify(input))\n        localStorage.setItem(key, JSON.stringify(storedJson))\n      }\n      ",
      "funcName": "persistOutput",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    },
    {
      "name": "emitEndEvent",
      "code": "const event = new CustomEvent('pd:pipe:end', {detail: {input, opts}})\n          dispatchEvent(event)",
      "funcName": "emitEndEvent",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    }
  ]
}