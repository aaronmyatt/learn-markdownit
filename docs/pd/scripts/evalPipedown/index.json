{
  "fileName": "evalPipedown",
  "dir": ".pd/scripts/evalPipedown",
  "config": {
    "on": {},
    "emit": true,
    "persist": true,
    "exclude": [
      "node_modules",
      "dist",
      "build",
      "coverage",
      "public",
      "temp",
      "docs/*",
      "docs/**/*"
    ],
    "build": [
      "esm"
    ]
  },
  "name": "Eval PD",
  "camelName": "evalPD",
  "steps": [
    {
      "name": "emitStartEvent",
      "code": "const event = new CustomEvent('pd:pipe:start', {detail: {input, opts}})\n          dispatchEvent(event)",
      "funcName": "emitStartEvent",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    },
    {
      "name": "persistInput",
      "code": "\n      const kvAvailable = typeof Deno !== 'undefined' && typeof Deno.openKv === 'function'\n      if(kvAvailable) {\n        try {\n          const db = await Deno.openKv()\n          const key = ['pd', 'input', opts.fileName]\n          try {\n              await db.set(key, JSON.stringify(input))\n          } catch (e) {\n            const safe = {\n              error: e.message,\n            }\n            for (const [k, v] of Object.entries(input)) {\n                safe[k] = typeof v;\n            }\n            await db.set(key, safe)\n          }\n        } catch (e) {\n            console.error(e)\n        }\n      } else {\n        const key = 'pd:input:' + opts.fileName \n        const inputJson = localStorage.getItem(key) || '[]'\n        const storedJson = JSON.parse(inputJson)\n        storedJson.push(JSON.stringify(input))\n        localStorage.setItem(key, JSON.stringify(storedJson))\n      }\n      ",
      "funcName": "persistInput",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    },
    {
      "code": "throw new Error(\"No name property found in script\");\n",
      "range": [
        21,
        23
      ],
      "name": "checkName",
      "funcName": "checkName",
      "inList": true,
      "config": {
        "not": [
          "/name"
        ]
      }
    },
    {
      "code": "input.url = `/pd/${input.name}/index.esm.js`;\nconsole.log(input.url, import.meta);\n",
      "range": [
        32,
        34
      ],
      "name": "generateUrl",
      "funcName": "generateUrl",
      "inList": false
    },
    {
      "code": "input.script = await import(input.url);\n",
      "range": [
        41,
        43
      ],
      "name": "importScript",
      "funcName": "importScript",
      "inList": false
    },
    {
      "code": "input.output = await input.script.pipe.process();\n",
      "range": [
        50,
        52
      ],
      "name": "runScript",
      "funcName": "runScript",
      "inList": false
    },
    {
      "name": "persistOutput",
      "code": "\n      const kvAvailable = typeof Deno !== 'undefined' && typeof Deno.openKv === 'function'\n      if(kvAvailable) {\n        try {\n          const db = await Deno.openKv()\n          const key = ['pd', 'output', opts.fileName]\n          try {\n              await db.set(key, JSON.stringify(input))\n          } catch (e) {\n            const safe = {\n              error: e.message,\n            }\n            for (const [k, v] of Object.entries(input)) {\n                safe[k] = typeof v;\n            }\n            await db.set(key, safe)\n          }\n        } catch (e) {\n            console.error(e)\n        }\n      } else {\n        const key = 'pd:output:' + opts.fileName \n        const inputJson = localStorage.getItem(key) || '[]'\n        const storedJson = JSON.parse(inputJson)\n        storedJson.push(JSON.stringify(input))\n        localStorage.setItem(key, JSON.stringify(storedJson))\n      }\n      ",
      "funcName": "persistOutput",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    },
    {
      "name": "emitEndEvent",
      "code": "const event = new CustomEvent('pd:pipe:end', {detail: {input, opts}})\n          dispatchEvent(event)",
      "funcName": "emitEndEvent",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    }
  ]
}