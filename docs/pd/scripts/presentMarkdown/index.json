{
  "fileName": "presentMarkdown",
  "dir": ".pd/scripts/presentMarkdown",
  "config": {
    "on": {},
    "emit": true,
    "persist": true,
    "exclude": [
      "node_modules",
      "dist",
      "build",
      "coverage",
      "public",
      "temp",
      "docs",
      "_site"
    ],
    "build": [
      "esm"
    ]
  },
  "name": "Present Markdown",
  "camelName": "presentMarkdown",
  "steps": [
    {
      "name": "emitStartEvent",
      "code": "const event = new CustomEvent('pd:pipe:start', {detail: {input, opts}})\n          dispatchEvent(event)",
      "funcName": "emitStartEvent",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    },
    {
      "name": "persistInput",
      "code": "\n      const kvAvailable = typeof Deno !== 'undefined' && typeof Deno.openKv === 'function'\n      if(kvAvailable) {\n        try {\n          const db = await Deno.openKv()\n          const key = ['pd', 'input', opts.fileName]\n          try {\n              await db.set(key, JSON.stringify(input))\n          } catch (e) {\n            const safe = {\n              error: e.message,\n            }\n            for (const [k, v] of Object.entries(input)) {\n                safe[k] = typeof v;\n            }\n            await db.set(key, safe)\n          }\n        } catch (e) {\n            console.error(e)\n        }\n      } else {\n        const key = 'pd:input:' + opts.fileName \n        const inputJson = localStorage.getItem(key) || '[]'\n        const storedJson = JSON.parse(inputJson)\n        storedJson.push(JSON.stringify(input))\n        localStorage.setItem(key, JSON.stringify(storedJson))\n      }\n      ",
      "funcName": "persistInput",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    },
    {
      "code": "input.url = input.url || new URL(window.location.href)\ninput.name = input.url.pathname.split('/').filter(Boolean).filter(part => part !== 'learn-markdownit').find(Boolean) || 'index'\n",
      "range": [
        15,
        17
      ],
      "name": "determine script name",
      "funcName": "determineScriptName",
      "inList": false
    },
    {
      "code": "const {markdown} = JSON.parse(localStorage.getItem('evalPipedown::'+input.name) || '{}')\ninput.markdown = markdown\n",
      "range": [
        29,
        31
      ],
      "name": "fetchMarkdown",
      "funcName": "fetchMarkdown",
      "inList": false
    },
    {
      "code": "document.querySelector('#htmldrawer').classList.remove('hidden')\nconsole.log(input)\n",
      "range": [
        41,
        44
      ],
      "name": "showDrawerButton",
      "funcName": "showDrawerButton",
      "inList": true,
      "config": {
        "checks": [
          "/markdown"
        ]
      }
    },
    {
      "code": "for (const md in input.markdown) {\n    const markdownDiv = document.createElement('div')\n    markdownDiv.classList.add('prose')\n\n    markdownDiv.innerHTML = `<div class=\"mockup-window border border-base-400 bg-base-300\">\n    <code>input.markdown.${md}</code>\n  <div class=\"prose p-5\">${input.markdown[md]}</div>\n</div>`\n    document.querySelector('#htmldrawerbody').appendChild(markdownDiv)\n}\n",
      "range": [
        56,
        66
      ],
      "name": "presentMarkdown",
      "funcName": "presentMarkdown",
      "inList": true,
      "config": {
        "checks": [
          "/markdown"
        ]
      }
    },
    {
      "name": "persistOutput",
      "code": "\n      const kvAvailable = typeof Deno !== 'undefined' && typeof Deno.openKv === 'function'\n      if(kvAvailable) {\n        try {\n          const db = await Deno.openKv()\n          const key = ['pd', 'output', opts.fileName]\n          try {\n              await db.set(key, JSON.stringify(input))\n          } catch (e) {\n            const safe = {\n              error: e.message,\n            }\n            for (const [k, v] of Object.entries(input)) {\n                safe[k] = typeof v;\n            }\n            await db.set(key, safe)\n          }\n        } catch (e) {\n            console.error(e)\n        }\n      } else {\n        const key = 'pd:output:' + opts.fileName \n        const inputJson = localStorage.getItem(key) || '[]'\n        const storedJson = JSON.parse(inputJson)\n        storedJson.push(JSON.stringify(input))\n        localStorage.setItem(key, JSON.stringify(storedJson))\n      }\n      ",
      "funcName": "persistOutput",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    },
    {
      "name": "emitEndEvent",
      "code": "const event = new CustomEvent('pd:pipe:end', {detail: {input, opts}})\n          dispatchEvent(event)",
      "funcName": "emitEndEvent",
      "inList": false,
      "range": [
        0,
        0
      ],
      "internal": true
    }
  ]
}